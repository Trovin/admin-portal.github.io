{"version":3,"sources":["webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.ts","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.html","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.module.ts","webpack:///src/app/mocks/register-form-select-items.ts","webpack:///src/app/modules/shared/validations/must-match.validator.ts"],"names":["RegistrationFormComponent","formBuilder","registerFormSubmit","email","password","lastName","firstName","selectedItemValue","btnContext","faIcon","selectAnswers","initForm","emit","registerForm","value","selectedAnswer","group","required","minLength","maxLength","pattern","confirmPassword","validator","controls","onSubmit","form","setValue","$event","selector","templateUrl","RegistrationFormModule","declarations","imports","exports","REGISTER_FORM_SELECT_ITEMS","viewValue","MatchValues","controlName","matchingControlName","formGroup","control","matchingControl","setErrors","mustMatch"],"mappings":"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","file":"default~containers-pages-private-portal-profile-profile-module~containers-pages-public-auth-registra~318ccdbe-es5.js","sourcesContent":["import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { iconClass } from '@enums/icon-class.enum';\r\nimport { inputType } from '@enums/input-type.enum';\r\n\r\nimport { MatchValues } from '@modules/shared/validations/must-match.validator';\r\n\r\nimport { IAuthFormData } from '@interfaces/auth-form-data.interface';\r\nimport { REGISTER_FORM_SELECT_ITEMS } from '@mocks/register-form-select-items';\r\n\r\n@Component({\r\n  selector: 'app-registration-form',\r\n  templateUrl: './registration-form.component.html'\r\n})\r\nexport class RegistrationFormComponent implements OnInit {\r\n\r\n  @Output() registerFormSubmit = new EventEmitter<IAuthFormData>();\r\n\r\n  @Input() email = '';\r\n  @Input() password = '';\r\n  @Input() lastName = '';\r\n  @Input() firstName = '';\r\n  @Input() selectedItemValue = '';\r\n  @Input() btnContext = 'Register';\r\n\r\n\r\n  registerForm: FormGroup;\r\n\r\n  faIcon = iconClass;\r\n\r\n  selectAnswers = REGISTER_FORM_SELECT_ITEMS;\r\n\r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n  }\r\n\r\n  get form() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.registerFormSubmit.emit({\r\n      email: this.registerForm.value.email,\r\n      firstName: this.registerForm.value.firstName,\r\n      lastName: this.registerForm.value.lastName,\r\n      password: this.registerForm.value.password,\r\n      selectedAnswer: this.registerForm.value.selectedAnswer || ''\r\n    });\r\n  }\r\n\r\n  private initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: [this.firstName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      lastName: [this.lastName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      email: [this.email, [\r\n        Validators.required,\r\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]\r\n      ],\r\n      password: [this.password, [\r\n        Validators.required,\r\n        Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{6,24}')]\r\n      ],\r\n      confirmPassword: [''],\r\n      selectedAnswer: [this.selectedItemValue]\r\n    }, { validator: MatchValues('password', 'confirmPassword') } );\r\n  }\r\n\r\n}\r\n","<form class=\"form\" [formGroup]=\"registerForm\" novalidate (ngSubmit)=\"onSubmit()\">\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"First name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"firstName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['firstName'].invalid && form['firstName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"Last name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"lastName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['lastName'].invalid && form['lastName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"email\"\r\n      placeholder=\"Email\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"email\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.EMAIL\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['email'].invalid && form['email'].touched\">\r\n    Email is invalid\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"password\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['password'].invalid && form['password'].touched\">\r\n    * Must contain: lowercase, uppercase, numbers, special characters and have length in range 8 - 24\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Confirm password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"confirmPassword\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['confirmPassword'].invalid && form['confirmPassword'].touched\">\r\n    * Passwords must match\r\n  </app-validation-message>\r\n\r\n  <app-select\r\n    label=\"How did you hear about us ?\"\r\n    [items]=\"selectAnswers\"\r\n    [selectedItem]=\"selectedItemValue\"\r\n    (selectedChange)=\"form['selectedAnswer'].setValue($event)\">\r\n  </app-select>\r\n\r\n  <app-button [context]=btnContext [state]=\"registerForm.invalid\" className=\"btn_submit\"></app-button>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ButtonModule } from '@components/button/button.module';\r\nimport { SelectModule } from '@components/select/select.module';\r\nimport { FormFieldModule } from '@components/form-field/form-field.module';\r\nimport { ValidationMessageModule } from '@components/validation-message/validation-message.module';\r\n\r\nimport { RegistrationFormComponent } from '@containers/common-layers/forms/registration-form/registration-form.component';\r\n\r\n@NgModule({\r\n  declarations: [RegistrationFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    SelectModule,\r\n    FormFieldModule,\r\n    ReactiveFormsModule,\r\n    ValidationMessageModule\r\n  ],\r\n  exports: [RegistrationFormComponent]\r\n})\r\nexport class RegistrationFormModule { }\r\n","import { IFormSelectItem } from '@interfaces/form-select-item.inteface';\r\n\r\nexport const REGISTER_FORM_SELECT_ITEMS: IFormSelectItem[] = [\r\n  {\r\n    value: 'Web',\r\n    viewValue: 'From web source'\r\n  },\r\n  {\r\n    value: 'Social',\r\n    viewValue: 'From friends or social'\r\n  },\r\n  {\r\n    value: 'Randomly',\r\n    viewValue: 'Actually, found randomly'\r\n  }\r\n];\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MatchValues(controlName: string, matchingControlName: string) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n"]}