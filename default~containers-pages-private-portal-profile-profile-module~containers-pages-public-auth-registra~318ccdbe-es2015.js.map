{"version":3,"sources":["./src/app/components/select/select.component.ts","./src/app/components/select/select.component.html","./src/app/components/select/select.module.ts","./src/app/containers/common-layers/forms/registration-form/registration-form.component.ts","./src/app/containers/common-layers/forms/registration-form/registration-form.component.html","./src/app/containers/common-layers/forms/registration-form/registration-form.module.ts","./src/app/models/countries/countries.dto.ts","./src/app/modules/services/countries-rest-service/countries-rest.service.ts","./src/app/modules/shared/validations/must-match.validator.ts","./src/app/modules/shared/validations/update-form-values.validator.ts"],"names":[],"mappings":"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","file":"default~containers-pages-private-portal-profile-profile-module~containers-pages-public-auth-registra~318ccdbe-es2015.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n\r\nimport { IFormSelectItem } from '@interfaces/form-select-item.inteface';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\nexport class SelectComponent implements OnChanges {\r\n\r\n  @Output() selectedChange = new EventEmitter<string>();\r\n\r\n  @Input() label: string;\r\n  @Input() items: IFormSelectItem[];\r\n  @Input() loading: boolean;\r\n  @Input() selectedItem: string;\r\n\r\n  viewLabel: string;\r\n  selectedValue: string;\r\n\r\n  ngOnChanges() {\r\n    this.viewLabel = this.loading ? 'loading...' : this.label;\r\n\r\n    if (this.selectedItem && this.items.length) {\r\n      this.selectedValue = this.items.find(item => item.value === this.selectedItem).value;\r\n      this.selectedChange.emit(this.selectedValue);\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-form-field\r\n  *ngIf=\"items\"\r\n  class=\"select-wrapper\"\r\n  appearance=\"fill\"\r\n  floatLabel=\"never\">\r\n  <mat-label>{{viewLabel}}</mat-label>\r\n  <mat-select\r\n    [value]=\"selectedValue\"\r\n    (valueChange)=\"selectedChange.emit($event)\">\r\n    <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\r\n      {{item.viewValue}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\nimport { SelectComponent } from '@components/select/select.component';\r\n\r\n@NgModule({\r\n  declarations: [SelectComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatProgressSpinnerModule,\r\n\r\n  ],\r\n  exports: [SelectComponent]\r\n})\r\nexport class SelectModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostListener,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnChanges\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MatchValuesValidator } from '@modules/shared/validations/must-match.validator';\r\nimport { UpdateFormValuesValidator } from '@modules/shared/validations/update-form-values.validator';\r\n\r\nimport { iconClass } from '@enums/icon-class.enum';\r\n\r\nimport { IAuthFormData } from '@interfaces/auth-form-data.interface';\r\n\r\nimport { CountriesRestService } from '@services/countries-rest-service/countries-rest.service';\r\n\r\n@Component({\r\n  selector: 'app-registration-form',\r\n  templateUrl: './registration-form.component.html'\r\n})\r\nexport class RegistrationFormComponent implements OnChanges, OnInit, OnDestroy {\r\n\r\n  @ViewChild('formElement') formRef: ElementRef;\r\n\r\n  @Output() registerFormSubmit = new EventEmitter<IAuthFormData>();\r\n\r\n  @Input() email = '';\r\n  @Input() password = '';\r\n  @Input() lastName = '';\r\n  @Input() firstName = '';\r\n  @Input() selectedCountry = '';\r\n\r\n  @Input() btnContext = 'Register';\r\n  @Input() isUpdateForm = false;\r\n\r\n  stream: Subscription;\r\n  registerForm: FormGroup;\r\n\r\n  faIcon = iconClass;\r\n  countries = [];\r\n\r\n  isLoading = true;\r\n  isFocusForm = false;\r\n\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onGlobalClick(event): void {\r\n    this.isFocusForm = this.formRef.nativeElement.contains(event.target);\r\n  }\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private countriesService: CountriesRestService\r\n  ) { }\r\n\r\n  ngOnChanges() {\r\n    this.initForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n    this.getCountries();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stream.unsubscribe();\r\n  }\r\n\r\n  get showUpdateValidationError() {\r\n    return this.isFocusForm && this.isUpdateForm;\r\n  }\r\n\r\n  get form() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.registerFormSubmit.emit({\r\n      email: this.registerForm.value.email,\r\n      firstName: this.registerForm.value.firstName,\r\n      lastName: this.registerForm.value.lastName,\r\n      password: this.registerForm.value.password,\r\n      selectedCountry: this.registerForm.value.selectedCountry,\r\n      registrationDate: new Date()\r\n    });\r\n\r\n    this.isFocusForm = false;\r\n  }\r\n\r\n  private initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: [this.firstName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      lastName: [this.lastName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      email: [this.email, [\r\n        Validators.required,\r\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]\r\n      ],\r\n      password: [this.password, [\r\n        Validators.required,\r\n        Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{6,24}')]\r\n      ],\r\n      confirmPassword: [this.password],\r\n      selectedCountry: [this.selectedCountry],\r\n      isUpdateFormValuesValidator: [],\r\n    }, {\r\n      validator: [\r\n        MatchValuesValidator('password', 'confirmPassword'),\r\n        UpdateFormValuesValidator(\r\n          [this.firstName, this.lastName, this.email, this.password, this.selectedCountry],\r\n          ['firstName', 'lastName', 'email', 'password', 'selectedCountry']\r\n        )\r\n      ]\r\n    });\r\n  }\r\n\r\n  private getCountries() {\r\n    this.stream = this.countriesService.getCountries()\r\n      .subscribe(countries => {\r\n        this.isLoading = false;\r\n        this.countries = countries;\r\n      });\r\n  }\r\n\r\n}\r\n","<form\r\n  class=\"form\"\r\n  novalidate\r\n  #formElement\r\n  [formGroup]=\"registerForm\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"First name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"firstName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['firstName'].invalid && form['firstName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"Last name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"lastName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['lastName'].invalid && form['lastName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"email\"\r\n      placeholder=\"Email\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"email\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.EMAIL\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['email'].invalid && form['email'].touched\">\r\n    Email is invalid\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"password\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['password'].invalid && form['password'].touched\">\r\n    * Must contain: lowercase, uppercase, numbers, special characters and have length in range 8 - 24\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Confirm password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"confirmPassword\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['confirmPassword'].invalid && form['confirmPassword'].touched\">\r\n    * Passwords must match\r\n  </app-validation-message>\r\n\r\n  <app-select\r\n    label=\"What is your country ?\"\r\n    (selectedChange)=\"form['selectedCountry'].setValue($event)\"\r\n    [items]=\"countries\"\r\n    [loading]=\"isLoading\"\r\n    [selectedItem]=\"selectedCountry\">\r\n  </app-select>\r\n\r\n  <app-validation-message [invalid]=\"showUpdateValidationError && form['isUpdateFormValuesValidator'].invalid\">\r\n    * Values on form must updates\r\n  </app-validation-message>\r\n\r\n  <app-button [context]=btnContext [state]=\"registerForm.invalid\" className=\"btn_submit\"></app-button>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ButtonModule } from '@components/button/button.module';\r\nimport { SelectModule } from '@components/select/select.module';\r\nimport { FormFieldModule } from '@components/form-field/form-field.module';\r\nimport { ValidationMessageModule } from '@components/validation-message/validation-message.module';\r\nimport { RegistrationFormComponent } from '@containers/common-layers/forms/registration-form/registration-form.component';\r\n\r\n@NgModule({\r\n  declarations: [RegistrationFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    SelectModule,\r\n    FormFieldModule,\r\n    ReactiveFormsModule,\r\n    ValidationMessageModule\r\n  ],\r\n  exports: [RegistrationFormComponent]\r\n})\r\nexport class RegistrationFormModule { }\r\n","export class Country {\r\n  value: string;\r\n  viewValue: string;\r\n\r\n  constructor(data: any) {\r\n    if (data) {\r\n      this.value = data.value;\r\n      this.viewValue = data.viewValue;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Country } from '@models/countries/countries.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountriesRestService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCountries(): Observable<Country[]> {\r\n    return this.http.get<any[]>('https://restcountries.eu/rest/v2/all')\r\n      .pipe(map( data => data.map(item => new Country({ value: item.alpha2Code, viewValue: item.name }))));\r\n  }\r\n\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MatchValuesValidator(controlName: string, matchingControlName: string) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function UpdateFormValuesValidator(defaultValues, controls) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const matchingControl = formGroup.controls.isUpdateFormValuesValidator;\r\n\r\n    let isUpdate = false;\r\n    controls.forEach((controlName, index) => {\r\n      const control = formGroup.controls[controlName];\r\n      if (control.value !== defaultValues[index]) {\r\n        isUpdate = true;\r\n      }\r\n    });\r\n\r\n    isUpdate ? matchingControl.setErrors(null) : matchingControl.setErrors({ mustContainUpdateValues: true });\r\n    isUpdate = false;\r\n  };\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}