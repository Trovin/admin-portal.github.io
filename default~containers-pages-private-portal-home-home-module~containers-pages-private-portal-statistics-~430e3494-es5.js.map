{"version":3,"sources":["webpack:///src/app/components/chart/chart.component.ts","webpack:///src/app/components/chart/chart.component.html","webpack:///src/app/components/chart/chart.module.ts","webpack:///src/app/enums/safe-chart-type.enum.ts","webpack:///src/app/modules/services/compose-chart-service/compose-chart-data.service.ts","webpack:///src/app/modules/services/task-rest-service/task-rest.service.ts"],"names":["ChartComponent","settingsService","chartType","type","DOUGHNUT","text","idKey","stream","largeScreen","labelColor","innerTextColor","mainChartColor","composeTitlePlugin","id","beforeDraw","chart","ctx","centerX","chartArea","left","right","centerY","top","bottom","ident","length","restore","font","fillStyle","textBaseline","fillText","save","renderChart","composeTitle","screenSizeObserver","subscribe","value","SM","destroy","composeChart","unsubscribe","pluginService","unregister","currentId","chartRef","nativeElement","getContext","data","labels","datasets","values","borderWidth","borderColor","backgroundColor","options","plugins","innerText","showText","title","display","legend","showLabels","boxWidth","padding","fontSize","fontStyle","fontColor","usePointStyle","fontFamily","align","position","register","isDoughnutChart","colors","selector","templateUrl","styleUrls","ChartModule","declarations","imports","exports","safeChartType","ComposeChartDataService","defaultColors","items","newStats","String","labelsSet","Set","forEach","item","add","status","Array","from","index","indexOf","providedIn","TaskRestService","http","newTask","post","apiUrl","get","task","put"],"mappings":"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","file":"default~containers-pages-private-portal-home-home-module~containers-pages-private-portal-statistics-~430e3494-es5.js","sourcesContent":["import { Component, Input, ViewChild, OnChanges, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Breakpoint } from '@enums/breakpoint.enum';\r\n\r\nimport { Chart } from 'chart.js';\r\n\r\nimport { safeChartType } from '@enums/safe-chart-type.enum';\r\nimport { AppSettingsService } from '@services/app-settings-service/app-settings.service';\r\n\r\n@Component({\r\n  selector: 'app-chart',\r\n  templateUrl: './chart.component.html',\r\n  styleUrls: ['./chart.component.scss']\r\n})\r\nexport class ChartComponent implements OnChanges, OnDestroy {\r\n\r\n  chartType = safeChartType;\r\n\r\n  @ViewChild('canvas', { static: true }) private chartRef;\r\n\r\n  @Input() type = this.chartType.DOUGHNUT;\r\n  @Input() text = '';\r\n  @Input() idKey = '1';\r\n  @Input() labels: string[];\r\n  @Input() values: number[];\r\n  @Input() colors: string[];\r\n  @Input() itemsCount: number;\r\n\r\n  get isDoughnutChart(): boolean {\r\n    return this.type === this.chartType.DOUGHNUT;\r\n  }\r\n\r\n  get showText(): boolean {\r\n    return this.isDoughnutChart && !!this.text;\r\n  }\r\n\r\n  get showLabels(): boolean {\r\n    return this.isDoughnutChart && this.largeScreen;\r\n  }\r\n\r\n  get backgroundColor(): string[] | string {\r\n    return this.isDoughnutChart ? this.colors : this.mainChartColor;\r\n  }\r\n\r\n  chart: Chart;\r\n  currentId: string;\r\n\r\n  stream = new Subscription();\r\n\r\n  largeScreen = true;\r\n\r\n  labelColor = '#8492af';\r\n  innerTextColor = '#a5afc4';\r\n  mainChartColor = 'rgba(47, 80, 168, .7)';\r\n\r\n  composeTitlePlugin = {\r\n    id: 'innerText',\r\n    beforeDraw: (chart: any) => {\r\n      const ctx = chart.chart.ctx;\r\n      const centerX = ((chart.chartArea.left + chart.chartArea.right) / 2);\r\n      const centerY = ((chart.chartArea.top + chart.chartArea.bottom) / 2);\r\n      const text = this.text;\r\n      const ident = this.text.length > 1 ? 10 : 5;\r\n\r\n      ctx.restore();\r\n      ctx.font = 'bold 28px Roboto';\r\n      ctx.fillStyle = this.innerTextColor;\r\n      ctx.textBaseline = 'middle';\r\n\r\n      ctx.fillText(text, centerX - ident, centerY);\r\n      ctx.save();\r\n    }\r\n  };\r\n\r\n  constructor(private settingsService: AppSettingsService) { }\r\n\r\n  ngOnChanges() {\r\n    this.renderChart();\r\n    this.composeTitle();\r\n\r\n    this.stream = this.settingsService.screenSizeObserver\r\n      .subscribe((value) => {\r\n        this.largeScreen = value !== Breakpoint.SM;\r\n        this.renderChart();\r\n      });\r\n  }\r\n\r\n  renderChart() {\r\n    this.chart?.destroy();\r\n    this.composeChart();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stream.unsubscribe();\r\n    Chart.pluginService.unregister(this.composeTitlePlugin);\r\n  }\r\n\r\n  composeChart() {\r\n    this.currentId = 'canvas' + this.idKey;\r\n    this.chart = new Chart(this.chartRef.nativeElement.getContext('2d'), {\r\n      type: this.type,\r\n      data: {\r\n        labels: this.labels,\r\n        datasets: [{\r\n          data: this.values,\r\n          borderWidth: 2,\r\n          borderColor: this.mainChartColor,\r\n          backgroundColor: this.backgroundColor\r\n        }]\r\n      },\r\n      options: {\r\n        plugins: {\r\n          innerText: this.showText\r\n        },\r\n        title: { display: false },\r\n        legend: {\r\n          display: this.showLabels,\r\n          labels: {\r\n            boxWidth: 8,\r\n            padding: 15,\r\n            fontSize: 18,\r\n            fontStyle: '300',\r\n            fontColor: this.labelColor,\r\n            usePointStyle: true,\r\n            fontFamily: 'Roboto'\r\n          },\r\n          align: 'center',\r\n          position: 'right'\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  composeTitle() {\r\n    Chart.pluginService.register(this.composeTitlePlugin);\r\n  }\r\n\r\n}\r\n","<div [hidden]=\"!chart\">\r\n  <canvas #canvas id=\"currentId\"></canvas>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ChartsModule } from 'ng2-charts';\r\n\r\nimport { ChartComponent } from './chart.component';\r\n\r\n@NgModule({\r\n  declarations: [ChartComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ChartsModule\r\n  ],\r\n  exports: [ChartComponent]\r\n})\r\nexport class ChartModule { }\r\n","/* declared types of custom tuned charts */\r\n\r\nexport enum safeChartType {\r\n  PIE = 'pie',\r\n  BAR = 'bar',\r\n  LINE = 'line',\r\n  RADAR = 'radar',\r\n  DOUGHNUT = 'doughnut',\r\n  POLAR_AREA = 'polarArea'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Task } from '@models/task/task.dto';\r\n\r\nimport { IChartStats } from '@interfaces/chart-stats.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComposeChartDataService {\r\n\r\n  defaultColors = ['#25396e', '#3755a4', '#4164c2', '#4163c2', '#4162c2'];\r\n\r\n  composeData(items: Task[]): IChartStats {\r\n    const newStats: IChartStats = {\r\n      text: '',\r\n      values: [],\r\n      labels: [],\r\n      colors: []\r\n    };\r\n\r\n    if (items.length) {\r\n      newStats.text = String(items.length);\r\n      newStats.colors = this.defaultColors;\r\n\r\n      const labelsSet = new Set();\r\n      items.forEach(item => labelsSet.add(item.status));\r\n      newStats.labels = Array.from(labelsSet);\r\n\r\n      items.forEach(item => {\r\n        const index = newStats.labels.indexOf(item.status);\r\n        newStats.values[index] = newStats.values[index] ? newStats.values[index] + 1 : 1;\r\n      });\r\n    }\r\n\r\n    return newStats;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Task } from '@models/task/task.dto';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { IUpdateListData, IListsData } from '@interfaces/update-list-data.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskRestService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  createTask(newTask: Task): Observable<IUpdateListData> {\r\n    return this.http.post<IUpdateListData>(`${environment.apiUrl}/tasks/create`, newTask);\r\n  }\r\n\r\n  getTasks(): Observable<Task[]> {\r\n    return this.http.get<Task[]>(`${environment.apiUrl}/tasks`);\r\n  }\r\n\r\n  getTasksByLists(): Observable<IUpdateListData> {\r\n    return this.http.get<IUpdateListData>(`${environment.apiUrl}/tasks/list`);\r\n  }\r\n\r\n  getPriorityTasks(): Observable<Task[]> {\r\n    return this.http.get<Task[]>(`${environment.apiUrl}/tasks/?isPriority=true`);\r\n  }\r\n\r\n  updateTaskById(id: number, task: Task): Observable<IUpdateListData> {\r\n    return this.http.put<IUpdateListData>(`${environment.apiUrl}/tasks/update/${id}`, task);\r\n  }\r\n\r\n  updateTasksLists(data: IListsData): Observable<IUpdateListData> {\r\n    return this.http.put<IUpdateListData>(`${environment.apiUrl}/tasks/lists`, data);\r\n  }\r\n\r\n  deleteTaskById(id: number): Observable<IUpdateListData> {\r\n    return this.http.delete<IUpdateListData>(`${environment.apiUrl}/tasks/delete/${id}`);\r\n  }\r\n\r\n}\r\n"]}