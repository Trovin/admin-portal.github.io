{"version":3,"sources":["webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.ts","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.html","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.module.ts","webpack:///src/app/mocks/register-form-select-items.ts","webpack:///src/app/modules/shared/validations/must-match.validator.ts","webpack:///src/app/modules/shared/validations/update-form-values.validator.ts"],"names":["RegistrationFormComponent","formBuilder","registerFormSubmit","email","password","lastName","firstName","selectedItemValue","btnContext","isUpdateForm","faIcon","selectAnswers","isFocusForm","event","formRef","nativeElement","contains","target","initForm","emit","registerForm","value","selectedAnswer","controls","isUpdateFormValuesValidator","setErrors","mustContainUpdateValues","group","required","minLength","maxLength","pattern","confirmPassword","validator","onSubmit","form","setValue","$event","selector","templateUrl","RegistrationFormModule","declarations","imports","exports","REGISTER_FORM_SELECT_ITEMS","viewValue","MatchValuesValidator","controlName","matchingControlName","formGroup","control","matchingControl","mustMatch","UpdateFormValuesValidator","defaultValues","isUpdate","forEach","index"],"mappings":"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","file":"default~containers-pages-private-portal-profile-profile-module~containers-pages-public-auth-registra~318ccdbe-es5.js","sourcesContent":["import { Component, OnInit, Output, EventEmitter, Input, HostListener, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { MatchValuesValidator } from '@modules/shared/validations/must-match.validator';\r\nimport { UpdateFormValuesValidator } from '@modules/shared/validations/update-form-values.validator';\r\n\r\nimport { iconClass } from '@enums/icon-class.enum';\r\n\r\nimport { IAuthFormData } from '@interfaces/auth-form-data.interface';\r\n\r\nimport { REGISTER_FORM_SELECT_ITEMS } from '@mocks/register-form-select-items';\r\n\r\n@Component({\r\n  selector: 'app-registration-form',\r\n  templateUrl: './registration-form.component.html'\r\n})\r\nexport class RegistrationFormComponent implements OnInit {\r\n\r\n  @ViewChild('formElement') formRef: ElementRef;\r\n\r\n  @Output() registerFormSubmit = new EventEmitter<IAuthFormData>();\r\n\r\n  @Input() email = '';\r\n  @Input() password = '';\r\n  @Input() lastName = '';\r\n  @Input() firstName = '';\r\n  @Input() selectedItemValue = '';\r\n  @Input() btnContext = 'Register';\r\n\r\n  @Input() isUpdateForm = false;\r\n\r\n  registerForm: FormGroup;\r\n\r\n  faIcon = iconClass;\r\n\r\n  selectAnswers = REGISTER_FORM_SELECT_ITEMS;\r\n\r\n  isFocusForm = false;\r\n\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onGlobalClick(event): void {\r\n    this.isFocusForm = this.formRef.nativeElement.contains(event.target);\r\n  }\r\n\r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n  }\r\n\r\n  get showUpdateValidationError() {\r\n    return this.isFocusForm && this.isUpdateForm;\r\n  }\r\n\r\n  get form() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.registerFormSubmit.emit({\r\n      email: this.registerForm.value.email,\r\n      firstName: this.registerForm.value.firstName,\r\n      lastName: this.registerForm.value.lastName,\r\n      password: this.registerForm.value.password,\r\n      selectedAnswer: this.registerForm.value.selectedAnswer\r\n    });\r\n\r\n    this.isFocusForm = true;\r\n    this.registerForm.controls.isUpdateFormValuesValidator.setErrors({ mustContainUpdateValues: true });\r\n  }\r\n\r\n  private initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: [this.firstName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      lastName: [this.lastName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      email: [this.email, [\r\n        Validators.required,\r\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]\r\n      ],\r\n      password: [this.password, [\r\n        Validators.required,\r\n        Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{6,24}')]\r\n      ],\r\n      confirmPassword: [this.password],\r\n      selectedAnswer: [this.selectedItemValue],\r\n      isUpdateFormValuesValidator: [],\r\n    }, {\r\n      validator: [\r\n        MatchValuesValidator('password', 'confirmPassword'),\r\n        UpdateFormValuesValidator(\r\n          [this.firstName, this.lastName, this.email, this.password, this.selectedItemValue],\r\n          ['firstName', 'lastName', 'email', 'password', 'selectedAnswer']\r\n        )\r\n      ]\r\n    });\r\n  }\r\n\r\n}\r\n","<form\r\n  class=\"form\"\r\n  novalidate\r\n  #formElement\r\n  [formGroup]=\"registerForm\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"First name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"firstName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['firstName'].invalid && form['firstName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"Last name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"lastName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['lastName'].invalid && form['lastName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"email\"\r\n      placeholder=\"Email\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"email\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.EMAIL\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['email'].invalid && form['email'].touched\">\r\n    Email is invalid\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"password\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['password'].invalid && form['password'].touched\">\r\n    * Must contain: lowercase, uppercase, numbers, special characters and have length in range 8 - 24\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Confirm password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"confirmPassword\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['confirmPassword'].invalid && form['confirmPassword'].touched\">\r\n    * Passwords must match\r\n  </app-validation-message>\r\n\r\n  <app-select\r\n    label=\"How did you hear about us ?\"\r\n    [items]=\"selectAnswers\"\r\n    [selectedItem]=\"selectedItemValue\"\r\n    (selectedChange)=\"form['selectedAnswer'].setValue($event)\">\r\n  </app-select>\r\n\r\n  <app-validation-message [invalid]=\"showUpdateValidationError && form['isUpdateFormValuesValidator'].invalid\">\r\n    * Values on form must updates\r\n  </app-validation-message>\r\n\r\n  <app-button [context]=btnContext [state]=\"registerForm.invalid\" className=\"btn_submit\"></app-button>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ButtonModule } from '@components/button/button.module';\r\nimport { SelectModule } from '@components/select/select.module';\r\nimport { FormFieldModule } from '@components/form-field/form-field.module';\r\nimport { ValidationMessageModule } from '@components/validation-message/validation-message.module';\r\n\r\nimport { RegistrationFormComponent } from '@containers/common-layers/forms/registration-form/registration-form.component';\r\n\r\n@NgModule({\r\n  declarations: [RegistrationFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    SelectModule,\r\n    FormFieldModule,\r\n    ReactiveFormsModule,\r\n    ValidationMessageModule\r\n  ],\r\n  exports: [RegistrationFormComponent]\r\n})\r\nexport class RegistrationFormModule { }\r\n","import { IFormSelectItem } from '@interfaces/form-select-item.inteface';\r\n\r\nexport const REGISTER_FORM_SELECT_ITEMS: IFormSelectItem[] = [\r\n  {\r\n    value: 'Web',\r\n    viewValue: 'From web source'\r\n  },\r\n  {\r\n    value: 'Social',\r\n    viewValue: 'From friends or social'\r\n  },\r\n  {\r\n    value: 'Randomly',\r\n    viewValue: 'Actually, found randomly'\r\n  }\r\n];\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MatchValuesValidator(controlName: string, matchingControlName: string) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function UpdateFormValuesValidator(defaultValues, controls) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const matchingControl = formGroup.controls.isUpdateFormValuesValidator;\r\n\r\n    let isUpdate = false;\r\n    controls.forEach((controlName, index) => {\r\n      const control = formGroup.controls[controlName];\r\n      if (control.value !== defaultValues[index]) {\r\n        isUpdate = true;\r\n      }\r\n    });\r\n\r\n    isUpdate ? matchingControl.setErrors(null) : matchingControl.setErrors({ mustContainUpdateValues: true });\r\n  };\r\n\r\n}\r\n"]}