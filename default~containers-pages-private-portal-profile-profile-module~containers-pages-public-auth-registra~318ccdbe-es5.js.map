{"version":3,"sources":["webpack:///src/app/components/select/select.component.ts","webpack:///src/app/components/select/select.component.html","webpack:///src/app/components/select/select.module.ts","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.ts","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.component.html","webpack:///src/app/containers/common-layers/forms/registration-form/registration-form.module.ts","webpack:///src/app/models/countries/countries.dto.ts","webpack:///src/app/modules/services/countries-rest-service/countries-rest.service.ts","webpack:///src/app/modules/shared/validations/must-match.validator.ts","webpack:///src/app/modules/shared/validations/update-form-values.validator.ts"],"names":["selectedChange","SelectComponent","viewLabel","loading","label","selectedItem","items","length","selectedValue","find","item","value","emit","selector","templateUrl","styleUrls","SelectModule","declarations","imports","exports","RegistrationFormComponent","formBuilder","countriesService","registerFormSubmit","email","password","lastName","firstName","selectedCountry","btnContext","isUpdateForm","faIcon","countries","isLoading","isFocusForm","event","formRef","nativeElement","contains","target","initForm","getCountries","stream","unsubscribe","registerForm","registrationDate","Date","group","required","minLength","maxLength","pattern","confirmPassword","isUpdateFormValuesValidator","validator","subscribe","controls","onSubmit","form","setValue","$event","RegistrationFormModule","Country","data","viewValue","CountriesRestService","http","get","pipe","map","alpha2Code","name","providedIn","MatchValuesValidator","controlName","matchingControlName","formGroup","control","matchingControl","setErrors","mustMatch","UpdateFormValuesValidator","defaultValues","isUpdate","forEach","index","mustContainUpdateValues"],"mappings":"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","file":"default~containers-pages-private-portal-profile-profile-module~containers-pages-public-auth-registra~318ccdbe-es5.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n\r\nimport { IFormSelectItem } from '@interfaces/form-select-item.inteface';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss']\r\n})\r\nexport class SelectComponent implements OnChanges {\r\n\r\n  @Output() selectedChange = new EventEmitter<string>();\r\n\r\n  @Input() label: string;\r\n  @Input() items: IFormSelectItem[];\r\n  @Input() loading: boolean;\r\n  @Input() selectedItem: string;\r\n\r\n  viewLabel: string;\r\n  selectedValue: string;\r\n\r\n  ngOnChanges() {\r\n    this.viewLabel = this.loading ? 'loading...' : this.label;\r\n\r\n    if (this.selectedItem && this.items.length) {\r\n      this.selectedValue = this.items.find(item => item.value === this.selectedItem).value;\r\n      this.selectedChange.emit(this.selectedValue);\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-form-field\r\n  *ngIf=\"items\"\r\n  class=\"select-wrapper\"\r\n  appearance=\"fill\"\r\n  floatLabel=\"never\">\r\n  <mat-label>{{viewLabel}}</mat-label>\r\n  <mat-select\r\n    [value]=\"selectedValue\"\r\n    (valueChange)=\"selectedChange.emit($event)\">\r\n    <mat-option *ngFor=\"let item of items\" [value]=\"item.value\">\r\n      {{item.viewValue}}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\nimport { SelectComponent } from '@components/select/select.component';\r\n\r\n@NgModule({\r\n  declarations: [SelectComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    MatProgressSpinnerModule,\r\n\r\n  ],\r\n  exports: [SelectComponent]\r\n})\r\nexport class SelectModule { }\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  HostListener,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n  OnChanges\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { MatchValuesValidator } from '@modules/shared/validations/must-match.validator';\r\nimport { UpdateFormValuesValidator } from '@modules/shared/validations/update-form-values.validator';\r\n\r\nimport { iconClass } from '@enums/icon-class.enum';\r\n\r\nimport { IAuthFormData } from '@interfaces/auth-form-data.interface';\r\n\r\nimport { CountriesRestService } from '@services/countries-rest-service/countries-rest.service';\r\n\r\n@Component({\r\n  selector: 'app-registration-form',\r\n  templateUrl: './registration-form.component.html'\r\n})\r\nexport class RegistrationFormComponent implements OnChanges, OnInit, OnDestroy {\r\n\r\n  @ViewChild('formElement') formRef: ElementRef;\r\n\r\n  @Output() registerFormSubmit = new EventEmitter<IAuthFormData>();\r\n\r\n  @Input() email = '';\r\n  @Input() password = '';\r\n  @Input() lastName = '';\r\n  @Input() firstName = '';\r\n  @Input() selectedCountry = '';\r\n\r\n  @Input() btnContext = 'Register';\r\n  @Input() isUpdateForm = false;\r\n\r\n  stream: Subscription;\r\n  registerForm: FormGroup;\r\n\r\n  faIcon = iconClass;\r\n  countries = [];\r\n\r\n  isLoading = true;\r\n  isFocusForm = false;\r\n\r\n  @HostListener('document:mousedown', ['$event'])\r\n  onGlobalClick(event): void {\r\n    this.isFocusForm = this.formRef.nativeElement.contains(event.target);\r\n  }\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private countriesService: CountriesRestService\r\n  ) { }\r\n\r\n  ngOnChanges() {\r\n    this.initForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initForm();\r\n    this.getCountries();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.stream.unsubscribe();\r\n  }\r\n\r\n  get showUpdateValidationError() {\r\n    return this.isFocusForm && this.isUpdateForm;\r\n  }\r\n\r\n  get form() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.registerFormSubmit.emit({\r\n      email: this.registerForm.value.email,\r\n      firstName: this.registerForm.value.firstName,\r\n      lastName: this.registerForm.value.lastName,\r\n      password: this.registerForm.value.password,\r\n      selectedCountry: this.registerForm.value.selectedCountry,\r\n      registrationDate: new Date()\r\n    });\r\n\r\n    this.isFocusForm = false;\r\n  }\r\n\r\n  private initForm() {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: [this.firstName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      lastName: [this.lastName, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(12),\r\n        Validators.pattern('(^\\\\S*$)')]\r\n      ],\r\n      email: [this.email, [\r\n        Validators.required,\r\n        Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]\r\n      ],\r\n      password: [this.password, [\r\n        Validators.required,\r\n        Validators.pattern('(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{6,24}')]\r\n      ],\r\n      confirmPassword: [this.password],\r\n      selectedCountry: [this.selectedCountry],\r\n      isUpdateFormValuesValidator: [],\r\n    }, {\r\n      validator: [\r\n        MatchValuesValidator('password', 'confirmPassword'),\r\n        UpdateFormValuesValidator(\r\n          [this.firstName, this.lastName, this.email, this.password, this.selectedCountry],\r\n          ['firstName', 'lastName', 'email', 'password', 'selectedCountry']\r\n        )\r\n      ]\r\n    });\r\n  }\r\n\r\n  private getCountries() {\r\n    this.stream = this.countriesService.getCountries()\r\n      .subscribe(countries => {\r\n        this.isLoading = false;\r\n        this.countries = countries;\r\n      });\r\n  }\r\n\r\n}\r\n","<form\r\n  class=\"form\"\r\n  novalidate\r\n  #formElement\r\n  [formGroup]=\"registerForm\"\r\n  (ngSubmit)=\"onSubmit()\">\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"First name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"firstName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['firstName'].invalid && form['firstName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"user\"\r\n      placeholder=\"Last name\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"lastName\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.USER\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['lastName'].invalid && form['lastName'].touched\">\r\n    * Must match: characters length in range 3 - 12, no trailing spaces\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      name=\"email\"\r\n      placeholder=\"Email\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"email\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.EMAIL\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['email'].invalid && form['email'].touched\">\r\n    Email is invalid\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"password\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['password'].invalid && form['password'].touched\">\r\n    * Must contain: lowercase, uppercase, numbers, special characters and have length in range 8 - 24\r\n  </app-validation-message>\r\n\r\n  <app-form-field>\r\n    <input\r\n      #formInput\r\n      class=\"form-control\"\r\n      type=\"password\"\r\n      name=\"password\"\r\n      placeholder=\"Confirm password\"\r\n      autocomplete=\"on\"\r\n      formControlName=\"confirmPassword\" />\r\n    <i #formIcon slot=\"icon\" aria-hidden=\"true\" [ngClass]=\"faIcon.PASSWORD\"></i>\r\n  </app-form-field>\r\n\r\n  <app-validation-message [invalid]=\"form['confirmPassword'].invalid && form['confirmPassword'].touched\">\r\n    * Passwords must match\r\n  </app-validation-message>\r\n\r\n  <app-select\r\n    label=\"What is your country ?\"\r\n    (selectedChange)=\"form['selectedCountry'].setValue($event)\"\r\n    [items]=\"countries\"\r\n    [loading]=\"isLoading\"\r\n    [selectedItem]=\"selectedCountry\">\r\n  </app-select>\r\n\r\n  <app-validation-message [invalid]=\"showUpdateValidationError && form['isUpdateFormValuesValidator'].invalid\">\r\n    * Values on form must updates\r\n  </app-validation-message>\r\n\r\n  <app-button [context]=btnContext [state]=\"registerForm.invalid\" className=\"btn_submit\"></app-button>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { ButtonModule } from '@components/button/button.module';\r\nimport { SelectModule } from '@components/select/select.module';\r\nimport { FormFieldModule } from '@components/form-field/form-field.module';\r\nimport { ValidationMessageModule } from '@components/validation-message/validation-message.module';\r\nimport { RegistrationFormComponent } from '@containers/common-layers/forms/registration-form/registration-form.component';\r\n\r\n@NgModule({\r\n  declarations: [RegistrationFormComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ButtonModule,\r\n    SelectModule,\r\n    FormFieldModule,\r\n    ReactiveFormsModule,\r\n    ValidationMessageModule\r\n  ],\r\n  exports: [RegistrationFormComponent]\r\n})\r\nexport class RegistrationFormModule { }\r\n","export class Country {\r\n  value: string;\r\n  viewValue: string;\r\n\r\n  constructor(data: any) {\r\n    if (data) {\r\n      this.value = data.value;\r\n      this.viewValue = data.viewValue;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Country } from '@models/countries/countries.dto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountriesRestService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCountries(): Observable<Country[]> {\r\n    return this.http.get<any[]>('https://restcountries.eu/rest/v2/all')\r\n      .pipe(map( data => data.map(item => new Country({ value: item.alpha2Code, viewValue: item.name }))));\r\n  }\r\n\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function MatchValuesValidator(controlName: string, matchingControlName: string) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const control = formGroup.controls[controlName];\r\n    const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n    if (control.value !== matchingControl.value) {\r\n      matchingControl.setErrors({ mustMatch: true });\r\n    } else {\r\n      matchingControl.setErrors(null);\r\n    }\r\n  };\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\n\r\nexport function UpdateFormValuesValidator(defaultValues, controls) {\r\n\r\n  return (formGroup: FormGroup) => {\r\n    const matchingControl = formGroup.controls.isUpdateFormValuesValidator;\r\n\r\n    let isUpdate = false;\r\n    controls.forEach((controlName, index) => {\r\n      const control = formGroup.controls[controlName];\r\n      if (control.value !== defaultValues[index]) {\r\n        isUpdate = true;\r\n      }\r\n    });\r\n\r\n    isUpdate ? matchingControl.setErrors(null) : matchingControl.setErrors({ mustContainUpdateValues: true });\r\n    isUpdate = false;\r\n  };\r\n\r\n}\r\n"]}